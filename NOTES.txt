# MANGA ASSISTANT - DEVELOPMENT NOTES
# Last Updated: 2025-03-10 16:15

## PROJECT ARCHITECTURE
The application follows a clean architecture pattern with the following layers:
1. MangaAssistant.Core - Domain models and interfaces
2. MangaAssistant.Application - Use cases and application services
3. MangaAssistant.Infrastructure - Implementation of core interfaces
4. MangaAssistant.Common - Shared utilities
5. MangaAssistant.WPF - Main WPF application and ViewModels
6. MangaAssistant.WPF.Controls - Reusable WPF controls

## KEY COMPONENTS

### LibraryScanner (MangaAssistant.Infrastructure.Services)
- Responsible for scanning the manga library directory
- Parses metadata from series-info.json files and ComicInfo.xml within CBZ files
- Determines series titles based on priority: metadata file > CBZ ComicInfo > folder name
- Emits events for scan progress and series discovery
- [2025-03-08] Added DetermineSeriesTitleAsync method to prioritize metadata sources for series titles

### LibraryService (MangaAssistant.Infrastructure.Services)
- Manages the library of manga series
- Coordinates scanning through LibraryScanner
- Maintains series collection and provides access to it
- Emits events when the library is updated or series are added
- Handles caching of library data

### MainViewModel (MangaAssistant.WPF.ViewModels)
- Central ViewModel for the main application window
- Manages the collection of Series objects displayed in the UI
- Handles library scanning and progress reporting
- Subscribes to events from LibraryService and LibraryScanner
- [2025-03-08] Added RefreshCoverImages method to refresh cover images after scanning

### MainWindow (MangaAssistant.WPF)
- Main application window with navigation between views
- Contains the LibraryView, SeriesDetailContainer, and SettingsContainer
- Handles navigation between these views
- [2025-03-08] Added RefreshLibraryCoverImages method to refresh covers when returning to library

### SeriesPage (MangaAssistant.WPF.Controls)
- Displays detailed information about a selected series
- Shows cover image, metadata, and chapter list
- Allows editing of series metadata
- Handles sorting and display of chapters

### MangaCard (MangaAssistant.WPF.Controls)
- UI component that displays a series in the library view
- Shows cover image, title, and reading progress
- Used in the ItemsControl in MainWindow.xaml

### PathToImageSourceConverter (MangaAssistant.WPF.Converters)
- Converts file paths to ImageSource objects for display in the UI
- [2025-03-08] Added image caching and ClearCache method to improve performance and allow refreshing

## IMPORTANT PATTERNS

### WPF Threading Pattern
- All UI collection updates must happen on the Dispatcher thread
- Application.Current.Dispatcher.Invoke/InvokeAsync is used for UI updates
- Temporary collections are used before updating UI collections
- Error handling happens on the UI thread for proper user feedback

### Event-Based Communication
- Components communicate through events (e.g., LibraryUpdated, SeriesAdded, ScanProgress)
- Event handlers are registered in constructors
- Event args contain relevant data (e.g., ScanProgressEventArgs, LibraryUpdatedEventArgs)

### MVVM Pattern
- ViewModels expose properties and commands
- Views bind to these properties
- INotifyPropertyChanged is implemented for UI updates
- Commands are used for user actions

## FIXES AND IMPROVEMENTS

### Series Title Display (2025-03-08)
- Issue: Series titles were not consistently displayed in the library
- Fix: Implemented DetermineSeriesTitleAsync method in LibraryScanner to prioritize metadata sources
- Priority: 1) series-info.json metadata, 2) ComicInfo.xml from CBZ files, 3) folder name
- Added debug logging to track which source is used for the title

### Cover Image Refresh (2025-03-08)
- Issue: Cover images were not refreshing when navigating back to the library or after scanning
- Fix 1: Added image caching in PathToImageSourceConverter with a ClearCache method
- Fix 2: Added RefreshLibraryCoverImages method to MainWindow to refresh covers when returning to library
- Fix 3: Added RefreshCoverImages method to MainViewModel to refresh covers after scanning
- This ensures covers are always up-to-date after metadata changes or rescanning

### Chapter Scanning Logic Improvements (2025-03-09)
- Issue: Chapter scanning logic was not accurately detecting chapter numbers, especially for series with numbers in their names
- Fix 1: Improved regex patterns to better handle various chapter naming formats
- Fix 2: Added context-aware parsing that considers the series directory name
- Fix 3: Added special handling for series with numbers in their names (like Bio Booster Armor Guyver)
- Fix 4: Enhanced the last-resort number detection to be more cautious to avoid false positives
- Fix 5: Added specific handling for Guyver manga with "Chapter XXX" naming pattern
- This ensures more accurate chapter numbering across different manga series naming conventions

### Chapter Context Menu Improvements (2025-03-09)
- Issue: Chapter context menu contained unnecessary options and lacked a way to view the chapter's filename
- Fix 1: Removed "Edit Metadata", "Rename Files", and "Delete" options from the context menu
- Fix 2: Added "Read", "Open Folder", and "View Chapter Name" options
- Fix 3: Implemented handlers for the new menu options
- Fix 4: Updated ChapterContextMenu class to match the changes in SeriesPage.xaml
- Fix 5: Added ViewChapterName method to display the chapter filename in a message box
- This provides a more streamlined and useful context menu for chapter management

### Sidebar Menu Enhancements (2025-03-09)
- Issue: The sidebar menu was small and lacked visual appeal
- Fix 1: Increased the width of the sidebar from 250px to 300px
- Fix 2: Added a gradient background and shadow effect for depth
- Fix 3: Improved button styling with animations, hover effects, and active state indicators
- Fix 4: Added a Tools section with a Scan Library button
- Fix 5: Added a footer section with version information
- Fix 6: Refactored the navigation system to use a ContentControl for better content switching
- This creates a more modern, visually appealing, and user-friendly navigation experience

### Event Handling Improvements (2025-03-10)
- Issue: Event handling for MangaCard components was not properly implemented
- Fix 1: Added proper routed event definitions for SeriesClicked and MetadataUpdateRequested events
- Fix 2: Implemented CLR event wrappers for better usability
- Fix 3: Updated event raising mechanism to use RaiseEvent for proper event routing
- Fix 4: Removed SearchBox and its related event handler as it was replaced by the sidebar search functionality
- This ensures proper event propagation and handling throughout the application

### Build Error Fixes (2025-03-10)
- Issue: Build was failing with error MC4005 about TextTransform property not found on TextBlock
- Fix: Removed the TextTransform property from SectionHeaderStyle in MainWindow.xaml as it's not supported in WPF
- Note: TextTransform is a CSS property but not available in WPF; to achieve uppercase text, use StringFormat or a converter
- The build now completes successfully with only minor warnings

### MangaCard Animation Fix (2025-03-10)
- Issue: Application was crashing with "System.InvalidOperationException: 'Transform' name cannot be found in the name scope of 'MangaAssistant.WPF.Controls.MangaCard'"
- Root Cause: The Storyboard animations in MangaCard.xaml were trying to target an element named "Transform" using Storyboard.TargetName, but there was a name scope issue
- Fix 1: Removed the Storyboard resources from MangaCard.xaml
- Fix 2: Implemented the animations directly in code in MangaCard_MouseEnter and MangaCard_MouseLeave methods
- Fix 3: Used direct animation on the ScaleTransform properties instead of relying on named targets
- This ensures the hover animations work correctly without name scope issues

### Log Window and UI Improvements (2025-03-10)
- Issue: The Scan Library button on the main page was not in an intuitive location and there was no way to view application logs
- Fix 1: Removed the Scan Library button from the main sidebar and replaced it with a View Logs button
- Fix 2: Created a new LogWindow control that displays application logs with filtering capabilities
- Fix 3: Added a Scan Library button to the SeriesPage action buttons for more contextual access
- Fix 4: Implemented the OnScanLibraryClick method in SeriesPage to trigger library scanning
- Fix 5: Enhanced the OnRefreshClick method to properly refresh series metadata
- This provides better access to application logs for debugging and moves the Scan Library functionality to a more appropriate location

### Logger and LogWindow Enhancements (2025-03-11)
- Issue: The LogWindow needed an auto-scroll feature and the Logger needed to be more robust
- Fix 1: Added an auto-scroll checkbox to the LogWindow to allow users to toggle automatic scrolling
- Fix 2: Enhanced the Logger class to store logs in memory for real-time display in the LogWindow
- Fix 3: Added methods to retrieve and clear logs from the Logger
- Fix 4: Implemented a LogAdded event to notify the LogWindow of new log entries
- Fix 5: Added support for the CRITICAL log level
- Fix 6: Replaced Debug.WriteLine calls with Logger.Log calls throughout the codebase
- This improves the logging experience and makes it easier to debug issues in the application

### LogWindow Performance Improvements (2025-03-11)
- Issue: The LogWindow was becoming unresponsive when displaying a large number of logs
- Fix 1: Implemented a throttling mechanism using a DispatcherTimer to limit UI updates
- Fix 2: Added batch processing of logs to prevent UI freezing (50 logs per batch)
- Fix 3: Created a queue system for pending logs to manage memory usage
- Fix 4: Optimized the auto-scrolling behavior to only scroll when necessary
- Fix 5: Added a cap on the number of log entries (5000) to prevent memory issues
- Fix 6: Improved the log filtering system to be more efficient
- Fix 7: Used background priority for dispatcher operations to keep the UI responsive
- These changes significantly improve the LogWindow's performance and responsiveness when displaying a large number of logs

### Enhanced Chapter and Volume Detection (2025-03-11)
- Issue: Chapter and volume detection needed to be more accurate and consistent with industry standards
- Fix 1: Completely redesigned the chapter and volume detection logic based on Manga Manager's approach
- Fix 2: Added filename normalization to remove common file suffixes and scan group tags
- Fix 3: Implemented series name extraction to avoid confusing series names with chapter numbers
- Fix 4: Enhanced regex patterns to better handle various manga naming conventions
- Fix 5: Added support for Japanese/Chinese chapter and volume indicators (第, 話, 话, 巻, 卷)
- Fix 6: Improved special case handling for series with unique naming patterns
- Fix 7: Created a more structured fallback system that tries different methods in sequence
- Fix 8: Added better metadata extraction from ComicInfo.xml files
- These changes ensure more accurate chapter and volume numbering, which is critical for proper sorting and organization in Kavita and other readers

### Decimal Chapter Number Display Fix (2025-03-13)
- Issue: Decimal chapter numbers (e.g., Chapter 1.5) were not displaying correctly in the UI
- Root Cause: The StringFormat pattern in ChapterCard.xaml was not properly configured for decimal values
- Fix 1: Updated the StringFormat in ChapterCard.xaml from 'Chapter {0:0.0#}' to 'Chapter {0:0.##}'
- Fix 2: Simplified and standardized the HandleSpecialCaseSeries method to better handle decimal chapter numbers
- Fix 3: Added consistent detection patterns for decimal chapter numbers across all special case series
- Fix 4: Enhanced logging to provide clearer information about decimal chapter number detection
- These changes ensure that decimal chapter numbers are correctly displayed in the UI with proper formatting

### Decimal Chapter Numbers Less Than 1 Fix (2025-03-13)
- Issue: Decimal chapter numbers less than 1 (e.g., Chapter 0.5) were not being detected or displayed correctly
- Root Cause: The regex patterns and display format were not optimized for decimal values less than 1
- Fix 1: Updated the StringFormat in ChapterCard.xaml to 'Chapter {0:0.00}' to ensure proper display of decimal values
- Fix 2: Added specific regex patterns for decimal chapter numbers less than 1 in the ChapterPatterns array
- Fix 3: Enhanced the ExtractChapterNumberFromFileName method to prioritize decimal numbers less than 1
- Fix 4: Updated the HandleSpecialCaseSeries method to specifically check for decimal chapter numbers less than 1
- Fix 5: Improved the ComicInfo.xml parsing to better handle decimal values less than 1
- Fix 6: Added extensive logging to track the detection of decimal chapter numbers less than 1
- These changes ensure that "half chapters" or special chapters with decimal numbering less than 1 (like 0.5) are correctly detected and displayed

### Custom Chapter Number Converter (2025-03-13)
- Issue: Despite the format string updates, decimal chapter numbers less than 1 were still not displaying correctly in the UI
- Root Cause: The StringFormat approach wasn't providing enough control over the formatting of different number ranges
- Fix 1: Created a custom ChapterNumberConverter class that handles different formatting based on the chapter number value
- Fix 2: For chapter numbers less than 1, the converter ensures the leading zero and two decimal places are displayed
- Fix 3: For chapter numbers greater than or equal to 1, the converter shows up to two decimal places only when needed
- Fix 4: Updated both SeriesPage.xaml and ChapterCard.xaml to use the new converter instead of StringFormat
- Fix 5: Added debug logging to the converter to help track chapter number formatting issues
- These changes provide a more robust and consistent display of chapter numbers throughout the application, especially for decimal values less than 1

### Chapter Number Display Testing (2024-03-13)
- Issue: Some chapters displaying as "Chapter 00" when they should be decimal chapters
- Test Environment Setup: Created TestChapterDisplay control with test cases for various chapter number scenarios
- Test Results:
  1. Raw Number Storage Test:
     - Test cases: 0.2, 0.5, 0.01, 1, 1.5, 2, 10.1, 100.5
     - Result: PASSED - Numbers stored correctly in data model
  2. ChapterNumberConverter Test:
     - Test cases: Same as above
     - Result: PASSED - All numbers formatted correctly including:
       * Decimals less than 1 (e.g., "Chapter 0.20")
       * Whole numbers (e.g., "Chapter 1")
       * Mixed decimals (e.g., "Chapter 1.5")
  3. Chapter Sorting Test:
     - Result: PASSED - Correct ascending order from 0.01 to 100.5
  4. ChapterCard UI Test:
     - Result: PASSED - Proper display in actual UI components

Conclusions:
1. Core number handling components are working correctly
2. Issue likely stems from one of:
   a) Chapter number extraction from filenames
   b) ComicInfo.xml parsing
   c) Special series naming pattern handling

Next Steps:
1. Test chapter number extraction with real filenames
2. Verify ComicInfo.xml parsing
3. Test special series naming patterns
4. Create dummy data to verify each scenario

### Raid Manga Chapter Number Fix (2024-03-13)
- Issue: Raid manga chapters with decimal numbers (e.g., Chapter 0.2) were displaying incorrectly as "Chapter 00"
- Root Cause: The series needed special handling for its unique chapter numbering pattern
- Fix 1: Added Raid as a special case in LibraryScanner.cs
- Fix 2: Implemented specific regex patterns to handle decimal chapter numbers:
  * Priority 1: Decimal numbers less than 1 (e.g., 0.2)
  * Priority 2: Other decimal numbers (e.g., 1.5)
  * Priority 3: Regular chapter numbers
  * Priority 4: Fallback to any number in filename
- Fix 3: Added extensive logging to track chapter number extraction
- This ensures proper handling of Raid manga's decimal chapter numbers while maintaining compatibility with other series

### LogWindow Null Reference Exception Fix (2024-03-13)
- Issue: LogWindow was throwing NullReferenceException when changing log levels
- Root Cause: Multiple potential null reference points in the LogLevelFilter_SelectionChanged method:
  1. LogLevelFilter could be null
  2. SelectedItem could be null
  3. _logView could become null
  4. Content property could be null
- Fix 1: Added null checks in LogLevelFilter_SelectionChanged method:
  * Added null-conditional operator for LogLevelFilter?.SelectedItem
  * Added explicit check for _logView != null
  * Added null-conditional operator for item.Content?.ToString()
- Fix 2: Updated LogWindow constructor to:
  * Add explicit check for _logView initialization
  * Throw InvalidOperationException if _logView creation fails
  * Set LogList.ItemsSource directly to _logEntries for more reliable binding
- Fix 3: Added defensive programming throughout the LogWindow class
- These changes ensure the LogWindow handles null cases gracefully and maintains proper initialization of critical components

## SYSTEM ARCHITECTURE INSIGHTS

### Logging System Architecture (2024-03-14)
- Core Components:
  1. Logger (MangaAssistant.Common.Logging)
     * Static class that serves as the central logging facility
     * Maintains in-memory log storage with event notification
     * Handles log level filtering and categorization
     * Thread-safe implementation for concurrent access
  
  2. LogWindow (MangaAssistant.WPF.Controls)
     * WPF window for displaying and filtering logs
     * Uses MVVM pattern with ObservableCollection<LogEntry>
     * Implements throttled updates via DispatcherTimer
     * Maintains separate UI and data threads for responsiveness
  
  3. LogEntry Model
     * Contains log metadata: Level, Timestamp, Message, Category
     * Supports context and tags for detailed debugging
     * Structured for efficient filtering and display

- Component Interactions:
  1. Logger → LogWindow:
     * LogAdded event notifies window of new entries
     * Batch processing through _pendingLogs queue
     * Thread-safe updates using _logLock
  
  2. LogWindow → Logger:
     * Retrieves initial logs via GetLogsAsync()
     * Clears logs through ClearLogs()
     * Maintains log level and category filters
  
  3. UI Thread Management:
     * DispatcherTimer handles UI updates (100ms interval)
     * Lock-free read operations for smooth scrolling
     * Background priority for non-critical updates

### Critical Dependencies and Initialization (2024-03-14)
- Component Initialization Order:
  1. Logger static initialization
  2. LogWindow constructor
  3. UI element initialization
  4. Event handler registration
  5. Initial log loading

- Key Dependencies:
  1. CollectionViewSource for filtered log display
  2. DispatcherTimer for throttled updates
  3. ObservableCollection for UI binding
  4. WPF data binding infrastructure

- Failure Points and Mitigations:
  1. Logger Initialization:
     * Must complete before any logging calls
     * Handles static constructor failures gracefully
     * Provides fallback to debug output on failure
  
  2. LogWindow Creation:
     * Verifies _logView initialization
     * Handles null owner window
     * Maintains window state on errors
  
  3. Event Handler Registration:
     * Proper cleanup on window closing
     * Handles unsubscribe in disposed state
     * Prevents memory leaks from event handlers

### Performance Considerations (2024-03-14)
- Memory Management:
  1. Log Entry Storage:
     * In-memory queue with 5000 entry limit
     * Oldest entries removed automatically
     * Batch processing to reduce memory pressure
  
  2. UI Updates:
     * Throttled to 100ms intervals
     * Background priority dispatcher operations
     * Virtualized list view for large log sets
  
  3. Filter Operations:
     * Cached filter results where possible
     * Efficient string comparisons
     * Category lookup optimization

- Threading Model:
  1. Logger Operations:
     * Thread-safe log addition
     * Non-blocking read operations
     * Minimal lock contention
  
  2. UI Updates:
     * Dispatcher queue management
     * Background priority for filters
     * Smooth scrolling implementation

### Troubleshooting Guide (2024-03-14)
- Common Issues and Solutions:
  1. Null Reference Exceptions:
     * Check LogWindow initialization order
     * Verify _logView creation
     * Ensure proper event handler cleanup
  
  2. UI Unresponsiveness:
     * Monitor DispatcherTimer frequency
     * Check filter operation complexity
     * Verify virtualization settings
  
  3. Memory Leaks:
     * Watch for uncleaned event handlers
     * Monitor _pendingLogs queue size
     * Check for retained window references

- Debugging Approaches:
  1. UI Thread Issues:
     * Use Dispatcher.VerifyAccess()
     * Check thread ID in log calls
     * Monitor UI update frequency
  
  2. Memory Issues:
     * Profile log entry retention
     * Monitor collection sizes
     * Track event handler references
  
  3. Performance Issues:
     * Log filter execution times
     * Monitor batch processing
     * Profile UI update cycles

### Integration Points (2024-03-14)
- LibraryScanner Integration:
  * Uses category "LibraryScanner"
  * Logs scan progress and file operations
  * Provides detailed context for debugging

- MainWindow Integration:
  * Manages LogWindow lifecycle
  * Handles log viewer navigation
  * Coordinates UI updates

- Settings Integration:
  * Log level configuration
  * Log retention policies
  * UI update frequency settings

## KNOWN ISSUES AND LIMITATIONS

### File Locking
- The application may encounter issues with locked files during scanning
- This can happen if files are being accessed by other processes
- Solution: Terminate the running application before building/debugging

### Performance Considerations
- Large libraries may take time to scan
- Image loading is optimized with caching but can still be resource-intensive
- The UI may become less responsive during scanning operations

## DEBUGGING TIPS

### Logging
- Debug.WriteLine statements are used throughout the codebase
- Check for these logs in the Output window when debugging
- Key areas to monitor: scan progress, series discovery, metadata parsing

### UI Refresh Issues
- If UI elements are not updating, check if updates are happening on the Dispatcher thread
- Verify that INotifyPropertyChanged is properly implemented
- Check binding expressions in XAML

### Image Loading Issues
- Verify file paths are correct and accessible
- Check if the PathToImageSourceConverter is handling exceptions properly
- Ensure the cache is being cleared when needed

Event Args Refactoring (2024-03-09):
- Issue: Duplicate definitions of ChapterActionRequestedEventArgs and ChapterActionRequestedEventHandler in multiple files.
- Root Cause: Event args and handlers were defined in both DirectChapterDisplay.xaml.cs and ChapterCard.xaml.cs.
- Fix: 
  1. Created a shared Events folder in MangaAssistant.WPF.Controls.
  2. Moved event args and handler definitions to ChapterActionRequestedEventArgs.cs.
  3. Updated DirectChapterDisplay.xaml.cs to use the shared definitions.
  4. Added 'new' keyword to Source property to explicitly indicate hiding base class member.
  5. This change improves code maintainability and reduces duplication.

### Logging Best Practices (2024-03-14)
- Established unified logging system with single source of truth
- Key Principles:
  1. All logs must be viewable through the "View Logs" page
  2. Use appropriate log levels:
     * DEBUG - Detailed information for debugging
     * INFO - General operational information
     * WARNING - Issues that don't affect core functionality
     * ERROR - Serious issues that affect functionality
     * CRITICAL - Application-breaking issues
  3. Include relevant context:
     * Category - Component/module generating the log
     * Context - Additional information (e.g., file paths)
     * Tags - Key-value pairs for filtering and debugging
  4. Structured logging format:
     * Clear, concise messages
     * Relevant metadata in tags
     * Consistent naming conventions
  5. Performance considerations:
     * Batch processing for UI updates
     * Memory management for log storage
     * Efficient filtering mechanisms

Implementation Notes:
- Use Logger.Log() for all logging needs
- Avoid direct Debug.WriteLine() calls
- Include appropriate context and tags
- Monitor log performance impact
- Regular log cleanup for memory management

## Best Practices

### Trust but Verify Principle
- Always verify assumptions and claims about code functionality
- Test changes after making them, don't assume they work
- Build and run the application after making changes
- Check logs and error messages for unexpected behavior
- When fixing errors, verify that the fix addresses the root cause, not just the symptoms
- Document verification steps taken and their results

### Logging System
- Uses structured logging with categories and levels
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Includes context and metadata for better debugging
- File-based logging with rotation
- Consistent logging format across the application
- Logs are stored in user's AppData directory

### Error Handling
- Use try-catch blocks for expected exceptions
- Log all errors with appropriate context
- Handle cleanup in finally blocks
- Graceful degradation when possible
- Provide user-friendly error messages

### Code Organization
- Keep code modular and maintainable
- Use clear naming conventions
- Document complex logic
- Follow SOLID principles
- Use dependency injection where appropriate

### Performance Considerations
- Batch operations when possible
- Use async/await for I/O operations
- Implement proper disposal of resources
- Monitor memory usage
- Cache frequently accessed data

### Build Process
- Build solution before committing changes
- Address compiler warnings
- Verify all projects build successfully
- Check for runtime errors
- Test main functionality after builds

Remember to update these notes as new patterns or issues are discovered.
